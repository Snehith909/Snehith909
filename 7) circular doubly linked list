class Node:
    def __init__(self,item=None,prev=None,next=None):
        self.prev = prev
        self.item = item
        self.next = next

class CDLL:
    def __init__(self,start=None):
        self.start = start

    def is_empty(self):
        return self.start == None
    
    def insert_at_start(self,data):
        n = Node(data)
        if self.start == None:
            n.prev = n
            n.next = n
        else:
            n.next = self.start
            n.prev = self.start.prev
            self.start.prev.next = n
            self.start.prev = n
        self.start = n

    def insert_at_last(self,data):
        n = Node(data)
        if self.start == None:
            n.prev = n
            n.next = n
            self.start = n

        else:
            n.next = self.start
            n.prev = self.start.prev
            n.prev.next = n
            self.start.prev = n

    def search(self,data):

        temp = self.start
        if temp == None:
            return None
        if temp.item == data:
            return temp
        
        else:
            temp = temp.next
            while temp != self.start:
                if temp.item == data:
                    return temp
                temp = temp.next
            return None
    def insert_after(self,temp,data):
            if temp != None: 
             n = Node(data)
             n.prev = temp 
             n.next = temp.next 
             temp.next.prev = n
             temp.next = n
 
    def print_list(self):
        temp = self.start
        if temp != None:
            print(temp.item,end=" ")
            temp = temp.next
        while temp != self.start:
            print(temp.item,end=" ")
            temp = temp.next

    def delete_first(self):
        if self.start != None:
            temp = self.start
            if temp.next == self.start:
                self.start = None
            else:
                self.start.next.prev = self.start.prev
                self.start.prev.next = self.start.next
                self.start = self.start.next

    def delete_last(self):
        if self.start != None:
            temp = self.start
            if temp.next == self.start:
                self.start = None
            else:
                self.start.prev = self.start.prev.prev
                self.start.prev.next = self.start

    def deleteitem(self, data):
        if self.start is not None:
          temp = self.start
        if temp.item == data:
            self.delete_first()
            return
        temp = temp.next
        while temp != self.start:
            if temp.item == data:
                temp.prev.next = temp.next
                temp.next.prev = temp.prev
                return   
            temp = temp.next 

            
cdll = CDLL()
cdll.insert_at_start(10)
cdll.insert_at_start(20)
cdll.insert_at_start(30)
cdll.insert_at_last(98)
cdll.insert_at_start(90)
cdll.insert_after(cdll.search(10),15)
cdll.delete_first()
cdll.delete_last()
cdll.deleteitem(20)
cdll.print_list()
